apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-deployment
  namespace: envoy
  labels:
    app: api

spec:
  replicas: 3

  selector:
    matchLabels:
      app: api

  template:
    metadata:
      name: api
      labels:
        app: api

    spec:
      containers:
        - name: api
          image: juliocesarmidia/http-simple-api:v1.0.0

          ports:
            - containerPort: 8080
              name: api-port

          env:
            - name: MESSAGE
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP

            - name: API_PORT
              value: "8080"

          resources:
            requests:
              memory: "128Mi"
              cpu: "200m"
            limits:
              memory: "256Mi"
              cpu: "400m"

          imagePullPolicy: IfNotPresent

      restartPolicy: Always

---

apiVersion: v1
kind: Service
metadata:
  name: api-svc
  namespace: envoy
  labels:
    app: api

# headless service, will not create a clusterIP neither load balance the requests
spec:
  clusterIP: None
  ports:
  - name: api-port
    port: 8080
    targetPort: api-port
    protocol: TCP

  selector:
    app: api

# kubectl exec -n envoy -it $(kubectl get pod -n envoy -l app=envoy -o custom-columns=":metadata.name" --no-headers) -- sh -c "apt-get update -y && apt install dnsutils -y && nslookup api-svc.envoy"
# nslookup api-svc.envoy
# Server:         10.96.0.10
# Address:        10.96.0.10:53

# Name:   api-svc.envoy.svc.cluster.local
# Address: 172.17.0.10
# Name:   api-svc.envoy.svc.cluster.local
# Address: 172.17.0.8
# Name:   api-svc.envoy.svc.cluster.local
# Address: 172.17.0.9

---

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: api-ingress
  namespace: envoy

  annotations:
    ingress.kubernetes.io/ssl-redirect: "false"
    ingress.kubernetes.io/force-ssl-redirect: "false"

    # for usage with Nginx Ingress
    # kubernetes.io/ingress.class: nginx
    # nginx.ingress.kubernetes.io/rewrite-target: /
    # nginx.org/lb-method: "least_conn" || "round_robin"

    # for usage with Traefik
    kubernetes.io/ingress.class: traefik
    traefik.ingress.kubernetes.io/rewrite-target: /
    traefik.ingress.kubernetes.io/load-balancer-method: "wrr"
    # drr Deficit Round Robin
    # wrr Weighted round robin

spec:
  rules:
  - http:
      paths:
        - path: /
          backend:
            serviceName: envoy-svc
            servicePort: 80
